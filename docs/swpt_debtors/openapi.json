{
  "info": {
    "description": "This API can be used to:\n1. Obtain public information about debtors and create new debtors.\n2. Change individual debtor's policies.\n3. Make credit-issuing transfers.\n",
    "title": "Debtors API",
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://demo.swaptacular.org/"
    },
    {
      "url": "/"
    }
  ],
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "This API uses OAuth 2. [More info](https://oauth.net/2/).",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://demo.swaptacular.org/debtors-hydra/oauth2/auth",
            "tokenUrl": "https://demo.swaptacular.org/debtors-hydra/oauth2/token",
            "refreshUrl": "https://demo.swaptacular.org/debtors-hydra/oauth2/token",
            "scopes": {
              "access.readonly": "read-only access",
              "access": "read-write access"
            }
          },
          "clientCredentials": {
            "tokenUrl": "https://demo.swaptacular.org/debtors-hydra/oauth2/token",
            "refreshUrl": "https://demo.swaptacular.org/debtors-hydra/oauth2/token",
            "scopes": {
              "access.readonly": "read-only access",
              "access": "read-write access",
              "activate": "activate new debtors",
              "deactivate": "deactivate existing debtors"
            }
          }
        }
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "status": {
            "type": "string",
            "description": "Error name"
          },
          "errors": {
            "type": "object",
            "description": "Errors"
          },
          "code": {
            "type": "integer",
            "description": "Error code"
          }
        }
      },
      "PaginationMetadata": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "total_pages": {
            "type": "integer"
          },
          "first_page": {
            "type": "integer"
          },
          "last_page": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          },
          "previous_page": {
            "type": "integer"
          },
          "next_page": {
            "type": "integer"
          }
        }
      },
      "DebtorReservationRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "DebtorReservationRequest",
            "writeOnly": true,
            "description": "The type of this object. Will always be present in the responses from the server.",
            "example": "DebtorReservationRequest"
          }
        }
      },
      "DebtorReservation": {
        "type": "object",
        "properties": {
          "validUntil": {
            "readOnly": true,
            "type": "string",
            "format": "date-time",
            "description": "The moment at which the reservation will expire."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The moment at which the reservation was created."
          },
          "type": {
            "readOnly": true,
            "type": "string",
            "description": "The type of this object. Will always be present in the responses from the server.",
            "example": "DebtorReservation"
          },
          "reservationId": {
            "readOnly": true,
            "maxLength": 100,
            "type": "string",
            "description": "An opaque string that will be required in order to successfully activate the debtor.",
            "example": "12345"
          },
          "debtorId": {
            "readOnly": true,
            "type": "string",
            "pattern": "^[0-9A-Za-z_=-]{1,64}$",
            "description": "The reserved debtor ID.",
            "example": "1"
          }
        },
        "required": [
          "createdAt",
          "debtorId",
          "reservationId",
          "type",
          "validUntil"
        ]
      },
      "DebtorsList": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "readOnly": true,
            "format": "uri-reference",
            "description": "The URI of this object. Can be a relative URI.",
            "example": "/debtors/.list"
          },
          "first": {
            "type": "string",
            "readOnly": true,
            "format": "uri-reference",
            "description": "The URI of the first page in the paginated list. This can be a relative URI. The object retrieved from this URI will have: 1) An `items` field (an array), which will contain the first items of the paginated list; 2) May have a `next` field (a string), which would contain the URI of the next page in the list.",
            "example": "/list?page=1"
          },
          "type": {
            "readOnly": true,
            "type": "string",
            "description": "The type of this object. Will always be present in the responses from the server.",
            "example": "DebtorsList"
          },
          "itemsType": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the items in the paginated list.",
            "example": "string"
          }
        },
        "required": [
          "first",
          "itemsType",
          "type",
          "uri"
        ]
      },
      "ObjectReference": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "format": "uri-reference",
            "description": "The URI of the object. Can be a relative URI.",
            "example": "https://example.com/objects/1"
          }
        },
        "required": [
          "uri"
        ]
      },
      "ObjectReferencesPage": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "readOnly": true,
            "format": "uri-reference",
            "description": "The URI of this object. Can be a relative URI.",
            "example": "/debtors/2/enumerate"
          },
          "next": {
            "type": "string",
            "readOnly": true,
            "format": "uri-reference",
            "description": "An URI of another `ObjectReferencesPage` object which contains more items. When there are no remaining items, this field will not be present. If this field is present, there might be remaining items, even when the `items` array is empty. This can be a relative URI.",
            "example": "?prev=111"
          },
          "items": {
            "readOnly": true,
            "description": "An array of `ObjectReference`s. Can be empty.",
            "example": [
              {
                "uri": "1/"
              },
              {
                "uri": "11/"
              },
              {
                "uri": "111/"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectReference"
            }
          },
          "type": {
            "readOnly": true,
            "type": "string",
            "description": "The type of this object. Will always be present in the responses from the server.",
            "example": "ObjectReferencesPage"
          }
        },
        "required": [
          "items",
          "type",
          "uri"
        ]
      },
      "DebtorActivationRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "DebtorActivationRequest",
            "writeOnly": true,
            "description": "The type of this object. Will always be present in the responses from the server.",
            "example": "DebtorActivationRequest"
          },
          "reservationId": {
            "type": "string",
            "writeOnly": true,
            "description": "When this field is present, the server will try to activate an existing reservation with matching `debtorID` and `reservationID`.\n\nWhen this field is not present, the server will try to reserve the debtor ID specified in the path, and activate it at once.",
            "example": "12345"
          }
        }
      },
      "DebtorConfig": {
        "type": "object",
        "properties": {
          "debtor": {
            "readOnly": true,
            "description": "The URI of the corresponding `Debtor`.",
            "example": {
              "uri": "/debtors/1/"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectReference"
              }
            ]
          },
          "latestUpdateAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The moment of the latest update on this object."
          },
          "configData": {
            "type": "string",
            "maxLength": 2000,
            "description": "The debtor's configuration data. Different implementations may use different formats for this field.",
            "example": ""
          },
          "uri": {
            "type": "string",
            "readOnly": true,
            "format": "uri-reference",
            "description": "The URI of this object. Can be a relative URI.",
            "example": "/debtors/1/config"
          },
          "type": {
            "type": "string",
            "default": "DebtorConfig",
            "description": "The type of this object. Will always be present in the responses from the server.",
            "example": "DebtorConfig"
          },
          "latestUpdateId": {
            "type": "integer",
            "minimum": 1,
            "maximum": 9223372036854775807,
            "format": "int64",
            "description": "The sequential number of the latest update in the object. This will always be a positive number, which starts from `1` and gets incremented with each change in the object.\n\n**Note:** When the object is changed by the client, the value of this field must be incremented by the client. The server will use the value of the field to detect conflicts which can occur when two clients try to update the object simultaneously.",
            "example": 123
          }
        },
        "required": [
          "configData",
          "debtor",
          "latestUpdateAt",
          "latestUpdateId",
          "uri"
        ]
      },
      "DebtorIdentity": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "DebtorIdentity",
            "description": "The type of this object. Will always be present in the responses from the server.",
            "example": "DebtorIdentity"
          },
          "uri": {
            "type": "string",
            "maxLength": 100,
            "format": "uri",
            "description": "The information contained in this field must be enough to uniquely and reliably identify the debtor. Note that a network request *should not be needed* to identify the debtor.",
            "example": "swpt:1"
          }
        },
        "required": [
          "uri"
        ]
      },
      "AccountIdentity": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "AccountIdentity",
            "description": "The type of this object. Will always be present in the responses from the server.",
            "example": "AccountIdentity"
          },
          "uri": {
            "type": "string",
            "maxLength": 200,
            "format": "uri",
            "description": "The information contained in this field must be enough to: 1) uniquely and reliably identify the debtor, 2) uniquely and reliably identify the creditor's account with the debtor. Note that a network request *should not be needed* to identify the account.\n\nFor example, if the debtor happens to be a bank, the URI would reveal the type of the debtor (a bank), the ID of the bank, and the bank account number."
          }
        },
        "required": [
          "uri"
        ]
      },
      "Debtor": {
        "type": "object",
        "properties": {
          "configError": {
            "type": "string",
            "readOnly": true,
            "description": "When this field is present, this means that for some reason, the current `DebtorConfig` settings can not be applied, or are not effectual anymore. Usually this means that there has been a network communication problem, or a system configuration problem. The value alludes to the cause of the problem.",
            "example": "CONFIGURATION_IS_NOT_EFFECTUAL"
          },
          "config": {
            "readOnly": true,
            "description": "Debtor's `DebtorConfig` settings.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DebtorConfig"
              }
            ]
          },
          "balance": {
            "type": "integer",
            "readOnly": true,
            "format": "int64",
            "description": "The total issued amount with a negative sign. Normally, it will be a negative number or a zero. A positive value, although theoretically possible, should be very rare.",
            "example": -1000000
          },
          "createTransfer": {
            "readOnly": true,
            "description": "A URI to which the debtor can POST `TransferCreationRequest`s to create new credit-issuing transfers.",
            "example": {
              "uri": "/debtors/1/transfers/"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectReference"
              }
            ]
          },
          "publicInfoDocument": {
            "readOnly": true,
            "description": "A URI that redirects to the debtor's public info document.",
            "example": {
              "uri": "/debtors/1/public"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectReference"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The moment at which the debtor was created."
          },
          "uri": {
            "type": "string",
            "readOnly": true,
            "format": "uri-reference",
            "description": "The URI of this object. Can be a relative URI.",
            "example": "/debtors/1/"
          },
          "transfersList": {
            "readOnly": true,
            "description": "The URI of the debtor's list of pending credit-issuing transfers (`TransfersList`).",
            "example": {
              "uri": "/debtors/1/transfers/"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectReference"
              }
            ]
          },
          "type": {
            "readOnly": true,
            "type": "string",
            "description": "The type of this object. Will always be present in the responses from the server.",
            "example": "Debtor"
          },
          "noteMaxBytes": {
            "type": "integer",
            "readOnly": true,
            "format": "int32",
            "description": "The maximal number of bytes that transfer notes are allowed to contain when UTF-8 encoded. This will be a non-negative number.",
            "example": 500
          },
          "identity": {
            "readOnly": true,
            "description": "The debtor's `DebtorIdentity`.",
            "example": {
              "type": "DebtorIdentity",
              "uri": "swpt:1"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/DebtorIdentity"
              }
            ]
          },
          "saveDocument": {
            "readOnly": true,
            "description": "A URI to which the debtor can POST documents to be saved.",
            "example": {
              "uri": "/debtors/1/documents/"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectReference"
              }
            ]
          },
          "account": {
            "readOnly": true,
            "description": "The `AccountIdentity` of the debtor's account. It uniquely and reliably identifies the debtor's account when it participates in transfers as sender or recipient. When this field is not present, this means that the debtor's account does not have an identity yet, and can not participate in transfers.",
            "example": {
              "type": "AccountIdentity",
              "uri": "swpt:1/0"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountIdentity"
              }
            ]
          }
        },
        "required": [
          "balance",
          "config",
          "createTransfer",
          "createdAt",
          "identity",
          "noteMaxBytes",
          "publicInfoDocument",
          "saveDocument",
          "transfersList",
          "type",
          "uri"
        ]
      },
      "DebtorDeactivationRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "DebtorDeactivationRequest",
            "writeOnly": true,
            "description": "The type of this object. Will always be present in the responses from the server.",
            "example": "DebtorDeactivationRequest"
          }
        }
      },
      "TransfersList": {
        "type": "object",
        "properties": {
          "debtor": {
            "readOnly": true,
            "description": "The URI of the corresponding `Debtor`.",
            "example": {
              "uri": "/debtors/1/"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectReference"
              }
            ]
          },
          "items": {
            "readOnly": true,
            "description": "Contains links to all `Transfers` in an array of `ObjectReference`s.",
            "example": [
              {
                "uri": "123e4567-e89b-12d3-a456-426655440000"
              },
              {
                "uri": "183ea7c7-7a96-4ed7-a50a-a2b069687d23"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectReference"
            }
          },
          "uri": {
            "type": "string",
            "readOnly": true,
            "format": "uri-reference",
            "description": "The URI of this object. Can be a relative URI.",
            "example": "/debtors/1/transfers/"
          },
          "type": {
            "readOnly": true,
            "type": "string",
            "description": "The type of this object. Will always be present in the responses from the server.",
            "example": "TransfersList"
          },
          "itemsType": {
            "readOnly": true,
            "type": "string",
            "description": "The type of the items in the list.",
            "example": "ObjectReference"
          },
          "first": {
            "readOnly": true,
            "type": "string",
            "format": "uri-reference",
            "description": "This will always be an empty string, representing the relative URI of the first and only page in a paginated list.",
            "example": ""
          }
        },
        "required": [
          "debtor",
          "first",
          "items",
          "itemsType",
          "type",
          "uri"
        ]
      },
      "TransferCreationRequest": {
        "type": "object",
        "properties": {
          "note": {
            "type": "string",
            "default": "",
            "maxLength": 500,
            "description": "A note from the debtor. Can be any string that the debtor wants the recipient to see.",
            "example": "Hello, World!"
          },
          "noteFormat": {
            "type": "string",
            "default": "",
            "pattern": "^[0-9A-Za-z.-]{0,8}$",
            "description": "The format used for the `note` field. An empty string signifies unstructured text.",
            "example": ""
          },
          "type": {
            "type": "string",
            "default": "TransferCreationRequest",
            "description": "The type of this object. Will always be present in the responses from the server.",
            "example": "TransferCreationRequest"
          },
          "amount": {
            "type": "integer",
            "minimum": 0,
            "maximum": 9223372036854775807,
            "format": "int64",
            "description": "The amount that has to be transferred. Must be a non-negative number. Setting this value to zero can be useful when the debtor wants to verify whether the recipient's account exists and accepts incoming transfers.",
            "example": 1000
          },
          "recipient": {
            "description": "The recipient's `AccountIdentity` information.",
            "example": {
              "type": "AccountIdentity",
              "uri": "swpt:1/2222"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountIdentity"
              }
            ]
          },
          "transferUuid": {
            "type": "string",
            "format": "uuid",
            "description": "A client-generated UUID for the transfer.",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          }
        },
        "required": [
          "amount",
          "recipient",
          "transferUuid"
        ]
      },
      "TransferError": {
        "type": "object",
        "properties": {
          "type": {
            "readOnly": true,
            "type": "string",
            "description": "The type of this object. Will always be present in the responses from the server.",
            "example": "TransferError"
          },
          "errorCode": {
            "type": "string",
            "readOnly": true,
            "description": "The error code.\n\n* `\"CANCELED_BY_THE_SENDER\"` signifies that the transfer has been   canceled by the sender.\n* `\"SENDER_DOES_NOT_EXIST\"` signifies that the sender's account   does not exist.\n* `\"RECIPIENT_IS_UNREACHABLE\"` signifies that the recipient's  account does not exist, or does not accept incoming transfers.\n* `\"NO_RECIPIENT_CONFIRMATION\"` signifies that a confirmation from   the recipient is required, but has not been obtained.\n* `\"TRANSFER_NOTE_IS_TOO_LONG\"` signifies that the transfer has been   rejected because the byte-length of the transfer note is too big.\n* `\"INSUFFICIENT_AVAILABLE_AMOUNT\"` signifies that the transfer   has been rejected due to insufficient amount available on the   sender's account.\n* `\"TERMINATED\"` signifies that the transfer has been terminated   due to expired deadline, unapproved interest rate change, or   some other *temporary or correctable condition*. If the client   verifies the transer options and retries the transfer, chances   are that it will be committed successfully.\n",
            "example": "INSUFFICIENT_AVAILABLE_AMOUNT"
          },
          "totalLockedAmount": {
            "readOnly": true,
            "type": "integer",
            "format": "int64",
            "description": "This field will be present only when the transfer has been rejected due to insufficient available amount. In this case, it will contain the total sum secured (locked) for transfers on the account, *after* this transfer has been finalized.",
            "example": 0
          }
        },
        "required": [
          "errorCode",
          "type"
        ]
      },
      "TransferResult": {
        "type": "object",
        "properties": {
          "type": {
            "readOnly": true,
            "type": "string",
            "description": "The type of this object. Will always be present in the responses from the server.",
            "example": "TransferResult"
          },
          "committedAmount": {
            "type": "integer",
            "readOnly": true,
            "format": "int64",
            "description": "The transferred amount. If the transfer has been successful, the value will be equal to the requested transfer amount (always a positive number). If the transfer has been unsuccessful, the value will be zero.",
            "example": 0
          },
          "finalizedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The moment at which the transfer was finalized."
          },
          "error": {
            "readOnly": true,
            "description": "An error that has occurred during the execution of the transfer. This field will be present if, and only if, the transfer has been unsuccessful.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferError"
              }
            ]
          }
        },
        "required": [
          "committedAmount",
          "finalizedAt",
          "type"
        ]
      },
      "Transfer": {
        "type": "object",
        "properties": {
          "note": {
            "type": "string",
            "readOnly": true,
            "description": "A note from the debtor. Can be any string that the debtor wants the recipient to see.",
            "example": "Hello, World!"
          },
          "noteFormat": {
            "type": "string",
            "readOnly": true,
            "pattern": "^[0-9A-Za-z.-]{0,8}$",
            "description": "The format used for the `note` field. An empty string signifies unstructured text.",
            "example": ""
          },
          "result": {
            "readOnly": true,
            "description": "Contains information about the outcome of the transfer. This field will be preset if, and only if, the transfer has been finalized. Note that a finalized transfer can be either successful, or unsuccessful.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransferResult"
              }
            ]
          },
          "initiatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The moment at which the transfer was initiated."
          },
          "type": {
            "readOnly": true,
            "type": "string",
            "description": "The type of this object. Will always be present in the responses from the server.",
            "example": "Transfer"
          },
          "uri": {
            "type": "string",
            "readOnly": true,
            "format": "uri-reference",
            "description": "The URI of this object. Can be a relative URI.",
            "example": "/debtors/1/transfers/123e4567-e89b-12d3-a456-426655440000"
          },
          "transfersList": {
            "readOnly": true,
            "description": "The URI of creditor's `TransfersList`.",
            "example": {
              "uri": "/debtors/1/transfers/"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectReference"
              }
            ]
          },
          "checkupAt": {
            "readOnly": true,
            "type": "string",
            "format": "date-time",
            "description": "The moment at which the debtor is advised to look at the transfer again, to see if it's status has changed. If this field is not present, this means either that the status of the transfer is not expected to change, or that the moment of the expected change can not be predicted."
          },
          "amount": {
            "type": "integer",
            "minimum": 0,
            "maximum": 9223372036854775807,
            "format": "int64",
            "description": "The amount that has to be transferred. Must be a non-negative number. Setting this value to zero can be useful when the debtor wants to verify whether the recipient's account exists and accepts incoming transfers.",
            "example": 1000
          },
          "recipient": {
            "description": "The recipient's `AccountIdentity` information.",
            "example": {
              "type": "AccountIdentity",
              "uri": "swpt:1/2222"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountIdentity"
              }
            ]
          },
          "transferUuid": {
            "type": "string",
            "format": "uuid",
            "description": "A client-generated UUID for the transfer.",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          }
        },
        "required": [
          "amount",
          "initiatedAt",
          "note",
          "noteFormat",
          "recipient",
          "transferUuid",
          "transfersList",
          "type",
          "uri"
        ]
      },
      "TransferCancelationRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "TransferCancelationRequest",
            "description": "The type of this object. Will always be present in the responses from the server.",
            "example": "TransferCancelationRequest"
          }
        }
      }
    },
    "responses": {
      "UNPROCESSABLE_ENTITY": {
        "description": "Unprocessable Entity",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "DEFAULT_ERROR": {
        "description": "Default error response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/debtors/.debtor-reserve": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DebtorReservation"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "409": {
            "description": "A debtor with the same ID already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code"
                    },
                    "errors": {
                      "type": "object",
                      "description": "Errors"
                    },
                    "status": {
                      "type": "string",
                      "description": "Error name"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DebtorReservationRequest"
              }
            }
          }
        },
        "summary": "Reserve an auto-generated debtor ID.",
        "description": "**Note:** The reserved debtor ID will be a random valid\ndebtor ID.",
        "tags": [
          "admin"
        ],
        "operationId": "reserveRandomDebtor",
        "security": [
          {
            "oauth2": [
              "activate"
            ]
          }
        ]
      }
    },
    "/debtors/.list": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DebtorsList"
                },
                "example": {
                  "type": "DebtorsList",
                  "uri": "/debtors/.list",
                  "itemsType": "ObjectReference",
                  "first": "/debtors/9223372036854775808/enumerate"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Return a paginated list of links to all activated debtors.",
        "tags": [
          "admin"
        ],
        "operationId": "getDebtorsList",
        "security": [
          {
            "oauth2": [
              "access.readonly"
            ]
          }
        ]
      }
    },
    "/debtors/{debtorId}/enumerate": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectReferencesPage"
                },
                "example": {
                  "uri": "/debtors/2/enumerate",
                  "type": "ObjectReferencesPage",
                  "items": [
                    {
                      "uri": "/debtors/1/"
                    },
                    {
                      "uri": "/debtors/5/"
                    },
                    {
                      "uri": "/debtors/11/"
                    }
                  ],
                  "next": "/debtors/12/enumerate"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Return a collection of activated debtors.",
        "description": "The returned object will be a fragment (a page) of a paginated\nlist. The paginated list contains references to all activated\ndebtors on the server. The returned fragment, and all the\nsubsequent fragments, will be sorted by debtor ID, starting\nfrom the `debtorID` specified in the path. The sorting order\nis implementation-specific.\n\n**Note:** To obtain references to all activated debtors, the\nclient should start with the debtor ID that precedes all other\nIDs in the sorting order.",
        "tags": [
          "admin"
        ],
        "operationId": "getDebtorsPage",
        "security": [
          {
            "oauth2": [
              "access.readonly"
            ]
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "debtorId",
          "required": true,
          "description": "The debtor's ID",
          "schema": {
            "type": "string",
            "pattern": "^[0-9A-Za-z_=-]{1,64}$"
          }
        }
      ]
    },
    "/debtors/{debtorId}/reserve": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DebtorReservation"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "409": {
            "description": "A debtor with the same ID already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code"
                    },
                    "errors": {
                      "type": "object",
                      "description": "Errors"
                    },
                    "status": {
                      "type": "string",
                      "description": "Error name"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DebtorReservationRequest"
              }
            }
          }
        },
        "summary": "Try to reserve a specific debtor ID.",
        "description": "**Note:** The reserved debtor ID will be the same as the\n`debtorId` specified in the path.",
        "tags": [
          "admin"
        ],
        "operationId": "reserveDebtor",
        "security": [
          {
            "oauth2": [
              "activate"
            ]
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "debtorId",
          "required": true,
          "description": "The debtor's ID",
          "schema": {
            "type": "string",
            "pattern": "^[0-9A-Za-z_=-]{1,64}$"
          }
        }
      ]
    },
    "/debtors/{debtorId}/activate": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Debtor"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "409": {
            "description": "A debtor with the same ID already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code"
                    },
                    "errors": {
                      "type": "object",
                      "description": "Errors"
                    },
                    "status": {
                      "type": "string",
                      "description": "Error name"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DebtorActivationRequest"
              }
            }
          }
        },
        "summary": "Activate a debtor.",
        "tags": [
          "admin"
        ],
        "operationId": "activateDebtor",
        "security": [
          {
            "oauth2": [
              "activate"
            ]
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "debtorId",
          "required": true,
          "description": "The debtor's ID",
          "schema": {
            "type": "string",
            "pattern": "^[0-9A-Za-z_=-]{1,64}$"
          }
        }
      ]
    },
    "/debtors/{debtorId}/deactivate": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DebtorDeactivationRequest"
              }
            }
          }
        },
        "summary": "Deactivate a debtor.",
        "tags": [
          "admin"
        ],
        "operationId": "deactivateDebtor",
        "security": [
          {
            "oauth2": [
              "deactivate"
            ]
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "debtorId",
          "required": true,
          "description": "The debtor's ID",
          "schema": {
            "type": "string",
            "pattern": "^[0-9A-Za-z_=-]{1,64}$"
          }
        }
      ]
    },
    "/debtors/.debtor": {
      "get": {
        "responses": {
          "204": {
            "description": "The debtor has not been found."
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "303": {
            "description": "The debtor has been found.",
            "headers": {
              "Location": {
                "description": "The URI of the entry.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        },
        "summary": "Redirect to the debtor's record.",
        "tags": [
          "debtors"
        ],
        "operationId": "redirectToDebtor",
        "security": [
          {
            "oauth2": [
              "access.readonly"
            ]
          }
        ]
      }
    },
    "/debtors/{debtorId}/": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Debtor"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Return debtor.",
        "tags": [
          "debtors"
        ],
        "operationId": "getDebtor",
        "security": [
          {
            "oauth2": [
              "access.readonly"
            ]
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "debtorId",
          "required": true,
          "description": "The debtor's ID",
          "schema": {
            "type": "string",
            "pattern": "^[0-9A-Za-z_=-]{1,64}$"
          }
        }
      ]
    },
    "/debtors/{debtorId}/config": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DebtorConfig"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Return debtors's configuration.",
        "tags": [
          "debtors"
        ],
        "operationId": "getDebtorConfig",
        "security": [
          {
            "oauth2": [
              "access.readonly"
            ]
          }
        ]
      },
      "patch": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DebtorConfig"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Forbidden operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code"
                    },
                    "errors": {
                      "type": "object",
                      "description": "Errors"
                    },
                    "status": {
                      "type": "string",
                      "description": "Error name"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflicting update attempts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code"
                    },
                    "errors": {
                      "type": "object",
                      "description": "Errors"
                    },
                    "status": {
                      "type": "string",
                      "description": "Error name"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DebtorConfig"
              }
            }
          }
        },
        "summary": "Update debtor's configuration.",
        "tags": [
          "debtors"
        ],
        "operationId": "updateDebtorConfig",
        "security": [
          {
            "oauth2": [
              "access"
            ]
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "debtorId",
          "required": true,
          "description": "The debtor's ID",
          "schema": {
            "type": "string",
            "pattern": "^[0-9A-Za-z_=-]{1,64}$"
          }
        }
      ]
    },
    "/debtors/{debtorId}/transfers/": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransfersList"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Return the debtor's list of initiated transfers.",
        "tags": [
          "transfers"
        ],
        "operationId": "getTransfersList",
        "security": [
          {
            "oauth2": [
              "access.readonly"
            ]
          }
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The URI of the entry.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "303": {
            "description": "The same transfer entry already exists.",
            "headers": {
              "Location": {
                "description": "The URI of the entry.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code"
                    },
                    "errors": {
                      "type": "object",
                      "description": "Errors"
                    },
                    "status": {
                      "type": "string",
                      "description": "Error name"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "A different transfer entry with the same UUID already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code"
                    },
                    "errors": {
                      "type": "object",
                      "description": "Errors"
                    },
                    "status": {
                      "type": "string",
                      "description": "Error name"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferCreationRequest"
              }
            }
          }
        },
        "summary": "Initiate a credit-issuing transfer.",
        "tags": [
          "transfers"
        ],
        "operationId": "createTransfer",
        "security": [
          {
            "oauth2": [
              "access"
            ]
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "debtorId",
          "required": true,
          "description": "The debtor's ID",
          "schema": {
            "type": "string",
            "pattern": "^[0-9A-Za-z_=-]{1,64}$"
          }
        }
      ]
    },
    "/debtors/{debtorId}/transfers/{transferUuid}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Return a transfer.",
        "tags": [
          "transfers"
        ],
        "operationId": "getTransfer",
        "security": [
          {
            "oauth2": [
              "access.readonly"
            ]
          }
        ]
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "The transfer can not be canceled.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code"
                    },
                    "errors": {
                      "type": "object",
                      "description": "Errors"
                    },
                    "status": {
                      "type": "string",
                      "description": "Error name"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferCancelationRequest"
              }
            }
          }
        },
        "summary": "Try to cancel a transfer.",
        "description": "**Note:** This is an idempotent operation.",
        "tags": [
          "transfers"
        ],
        "operationId": "cancelTransfer",
        "security": [
          {
            "oauth2": [
              "access"
            ]
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Delete a transfer.",
        "description": "Before deleting a transfer, client implementations should\nensure that at least 5 days (120 hours) have passed since the\ntransfer was initiated (see the `initiatedAt` field). Also, it\nis recommended successful transfers to stay on the server at\nleast a few weeks after their finalization.\n\nNote that deleting a running (not finalized) transfer does not\ncancel it. To ensure that a running transfer has not been\nsuccessful, it must be canceled before deletion.",
        "tags": [
          "transfers"
        ],
        "operationId": "deleteTransfer",
        "security": [
          {
            "oauth2": [
              "access"
            ]
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "debtorId",
          "required": true,
          "description": "The debtor's ID",
          "schema": {
            "type": "string",
            "pattern": "^[0-9A-Za-z_=-]{1,64}$"
          }
        },
        {
          "in": "path",
          "name": "transferUuid",
          "required": true,
          "description": "The transfer's UUID",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ]
    },
    "/debtors/{debtorId}/public": {
      "get": {
        "responses": {
          "302": {
            "description": "The debtor's public info document has been found.",
            "headers": {
              "Location": {
                "description": "The URI of the entry.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Redirect to the debtor's public info document.",
        "description": "The user will be redirected to the info URL specified in the\ndebtor's configuration. If no URL is specified in the\nconfiguration, a `404` error code will be returned.",
        "tags": [
          "documents"
        ],
        "operationId": "redirectToDebtorsInfo"
      },
      "parameters": [
        {
          "in": "path",
          "name": "debtorId",
          "required": true,
          "description": "The debtor's ID",
          "schema": {
            "type": "string",
            "pattern": "^[0-9A-Za-z_=-]{1,64}$"
          }
        }
      ]
    },
    "/debtors/{debtorId}/documents/": {
      "post": {
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The URI of the entry.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "text/plain": {
                "example": "This is an example document."
              },
              "*/*": {}
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "Forbidden operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code"
                    },
                    "errors": {
                      "type": "object",
                      "description": "Errors"
                    },
                    "status": {
                      "type": "string",
                      "description": "Error name"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "The document is too big.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code"
                    },
                    "errors": {
                      "type": "object",
                      "description": "Errors"
                    },
                    "status": {
                      "type": "string",
                      "description": "Error name"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Save a document.",
        "description": "The body of the request should contain the document to be\nsaved. The document can be of any type, as long as the type is\ncorrectly specified by the `Content-Type` header in the\nrequest.",
        "tags": [
          "documents"
        ],
        "operationId": "saveDocument",
        "security": [
          {
            "oauth2": [
              "access"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "example": "This is an example document."
            },
            "*/*": {}
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "debtorId",
          "required": true,
          "description": "The debtor's ID",
          "schema": {
            "type": "string",
            "pattern": "^[0-9A-Za-z_=-]{1,64}$"
          }
        }
      ]
    },
    "/debtors/{debtorId}/documents/{documentId}/public": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "example": "This is an example document."
              },
              "*/*": {}
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Return a saved document.",
        "description": "The returned document can be of any type. The document's type\nwill be specified by the `Content-Type` header in the\nresponse.",
        "tags": [
          "documents"
        ],
        "operationId": "getDocument"
      },
      "parameters": [
        {
          "in": "path",
          "name": "debtorId",
          "required": true,
          "description": "The debtor's ID",
          "schema": {
            "type": "string",
            "pattern": "^[0-9A-Za-z_=-]{1,64}$"
          }
        },
        {
          "in": "path",
          "name": "documentId",
          "required": true,
          "description": "The document's ID",
          "schema": {
            "type": "string",
            "pattern": "^[0-9A-Za-z_=-]{1,64}$"
          }
        }
      ]
    }
  },
  "tags": [
    {
      "name": "admin",
      "description": "View debtors list, create new debtors."
    },
    {
      "name": "debtors",
      "description": "View public information about debtors."
    },
    {
      "name": "transfers",
      "description": "Make credit-issuing transfers."
    },
    {
      "name": "documents",
      "description": "Maintains an ever-growing set of public documents."
    }
  ],
  "openapi": "3.0.2"
}
